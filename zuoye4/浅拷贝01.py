# 浅拷贝   第一层创建的是新地址，第二层及其他层指向同一个内存地址
list01 = [1, 2, 3, 4, 5, 6, 7, [1, 2]]
print(f"第一层列表是: {list01}, 内存地址是: {id(list01)}")
print(f"第一层列表的第0个元素是: {list01[0]},内存地址是: {id(list01[0])}")
# print(id(list01[-1][1]))
print(id(list01[-1]))
print(id(list01[-1][1]))
list01.remove(4)

list02 = list01.copy()
list01[0] = 11111
print("---------------------------------------------------")
print(f"第二层列表是: {list02},内存地址是: {id(list02)}")
print(f"第二层列表的第0个元素是: {list02[0]}, 内存地址是: {id(list02[0])}")
print(list01)
print(id(list02[-1]))
print(id(list02[-1][1]))
list03 = list01.copy()
print("---------------------------------------------------")
print(f"第三层列表是: {list03},内存地址是: {id(list03)}")
print(f"第三层列表的第0个元素是: {list03[0]}, 内存地址是: {id(list03[0])}")
list04 = list01.copy()
print("---------------------------------------------------")
print(f"第四层列表是: {list04},内存地址是: {id(list04)}")
print(f"第四层列表的第0个元素是: {list04[0]}, 内存地址是: {id(list04[0])}")

# 总结:浅拷贝就是重新创建列表的内存地址，而元素的内存地址不变(同第一层的元素地址相同)
# 所以：浅拷贝就是新创建的列表内存地址指向第一层的元素地址
